
buildfile 'persist_examples/persist_examples.forge';
buildfile 'persist_test/persist_test.forge';

for _, cc in toolsets('cc.*') do
    local cc = cc:inherit {
        warning_level = 0;  
    };

    cc:all {
        cc:StaticLibrary '${lib}/persist_${platform}_${architecture}' {
            '${lib}/lalr_${platform}_${architecture}';
            cc:Cxx '${obj}/%1' {
                defines = { 
                    'BOOST_ALL_NO_LIB'; -- Disable automatic linking to Boost libraries.
                };
                'Address.cpp',
                'Archive.cpp',
                'Attribute.cpp',        
                'BinaryReader.cpp',
                'BinaryWriter.cpp',
                'Context.cpp',
                'Element.cpp',
                'EnumFilter.cpp',
                'JsonParser.cpp',
                'JsonReader.cpp',
                'JsonWriter.cpp',
                'LuaParser.cpp',
                'LuaReader.cpp',
                'LuaWriter.cpp',
                'MaskFilter.cpp',
                'narrow.cpp',
                'PathFilter.cpp',
                'PersistError.cpp',
                'Reference.cpp',
                'Resolver.cpp',
                'strnlen.cpp',
                'TextReader.cpp',
                'TextWriter.cpp',
                'Ucs2CharFilter.cpp',
                'widen.cpp',
                'XmlParser.cpp',
                'XmlReader.cpp',
                'XmlWriter.cpp'
            };

            cc:Cxx '${obj}/%1' {
                cc:Lalrc (absolute('json_parser.cpp')) {
                    'json_parser.g';
                };
                cc:Lalrc (absolute('lua_parser.cpp')) {
                    'lua_parser.g';
                };
                cc:Lalrc (absolute('xml_parser.cpp')) {
                    'xml_parser.g';
                };
            };
        };
    };
end
